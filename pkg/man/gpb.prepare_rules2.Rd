% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gpb.prepare_rules2.R
\name{gpb.prepare_rules2}
\alias{gpb.prepare_rules2}
\title{Data preparator for LightGBM datasets with rules (integer)}
\usage{
gpb.prepare_rules2(data, rules = NULL)
}
\arguments{
\item{data}{A data.frame or data.table to prepare.}

\item{rules}{A set of rules from the data preparator, if already used.}
}
\value{
A list with the cleaned dataset (\code{data}) and the rules (\code{rules}). The data must be converted to a matrix format (\code{as.matrix}) for input in \code{gpb.Dataset}.
}
\description{
Attempts to prepare a clean dataset to prepare to put in a \code{gpb.Dataset}. Factors and characters are converted to numeric (specifically: integer). In addition, keeps rules created so you can convert other datasets using this converter. This is useful if you have a specific need for integer dataset instead of numeric dataset. Note that there are programs which do not support integer-only input. Consider this as a half memory technique which is dangerous.
}
\examples{
\dontrun{
library(gpboost)
data(iris)

str(iris)

new_iris <- gpb.prepare_rules2(data = iris) # Autoconverter
str(new_iris$data)

data(iris) # Erase iris dataset
iris$Species[1] <- "NEW FACTOR" # Introduce junk factor (NA)

# Use conversion using known rules
# Unknown factors become 0, excellent for sparse datasets
newer_iris <- gpb.prepare_rules2(data = iris, rules = new_iris$rules)

# Unknown factor is now zero, perfect for sparse datasets
newer_iris$data[1, ] # Species became 0 as it is an unknown factor

newer_iris$data[1, 5] <- 1 # Put back real initial value

# Is the newly created dataset equal? YES!
all.equal(new_iris$data, newer_iris$data)

# Can we test our own rules?
data(iris) # Erase iris dataset

# We remapped values differently
personal_rules <- list(Species = c("setosa" = 3L,
                                   "versicolor" = 2L,
                                   "virginica" = 1L))
newest_iris <- gpb.prepare_rules2(data = iris, rules = personal_rules)
str(newest_iris$data) # SUCCESS!
}

}
